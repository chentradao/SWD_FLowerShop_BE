generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  passwordHash       String
  name               String
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  wallet             Float               @default(0)
  cart               CartItem[]
  orders             Order[]
  reviews            Review[]

  @@map("user")
}


model CartItem {
  id       String   @id @default(uuid())
  userId   String
  bookId   String
  quantity Int      @default(1)
  addedAt  DateTime @default(now())
  book     Book     @relation(fields: [bookId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Author {
  id        String    @id @default(uuid())
  name      String
  bio       String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  books     Book[]    @relation("AuthorToBook")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  books     Book[]    @relation("BookToCategory")
}

model Book {
  id          String      @id @default(uuid())
  title       String
  description String?
  image       String
  price       Float
  stock       Int         @default(0)
  sold        Int         @default(0)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      BookStatus  @default(AVAILABLE)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  authors     Author[]    @relation("AuthorToBook")
  categories  Category[]  @relation("BookToCategory")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  bookId    String
  userId    String
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  userAddress   Json?  
  total     Float
  status    OrderStatus @default(PENDING)
  payment   paymentMethod  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  bookId   String
  quantity Int
  price    Float
  book     Book   @relation(fields: [bookId], references: [id])
  order    Order  @relation(fields: [orderId], references: [id])
}


model OtpVerification {
  id       String @id @default(uuid())
  email     String
  otp   String
  createdAt    DateTime
  used     Boolean
}

model Wallet {
  id       String @id @default(uuid())
  userId     String  @unique
  balance   Int
  lastUpdated    DateTime  @default(now())
}

model WalletTransaction {
  id       String @id @default(uuid())
  walletId     String
  amount   Int
  createdAt    DateTime  @default(now())
  status    String
  transactionCode    String
  confirmedAt    DateTime  @default(now())
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum BookStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
  DISABLE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPING
  DELIVERED
  CANCELLED
}

enum paymentMethod {
  Wallet
  COD
}

enum Role {
  USER
  ADMIN
}